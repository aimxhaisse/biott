#+begin_html
---
layout: post
title: "Building Extempore on Windows"
date: 2012-11-05 15:53
comments: true
categories:
---
#+end_html

These instructions are for building Extempore from source. If you're
after a less painful installation process, then you'll soon (real
soon!) be able to download a precompiled binary release.

This process should work on Windows 7, and possibly Windows 8 too.
You might not have /all/ the problems described herein, but if you do
then hopefully these hints will get you through.  And again, I
acknowledge that building Extempore on Windows is a bit hairy at this
point---any pull requests from Windows gurus which streamline the
process will be gladly received.

* Programs/utilities you'll need
# - .NET framework 4.0
# - Windows 7 SDK

These aren't part of Extempore itself, but you'll need them to build
it.  If you often build things from source, you might already have
some of them installed.

- [[http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop][Visual Studio Express 2012 for Windows Desktop]]
- [[http://www.cmake.org][cmake]]
- [[http://msysgit.github.com][git]]
- [[http://www.7-zip.org][7zip]] (or equivalent) for uncompressing files

* Dependencies

Extempore has four compile-time dependencies: LLVM 3.0, PCRE,
Portaudio and Boost.  You'll need to download and compile these
projects before you can compile Extempore.  These instructions will
hopefully help you through the tricky bits.

** LLVM

*** Patching LLVM

LLVM *must* be version 3.0 and needs to be built from source, because
a small patch to =LLParser.cpp= (an LLVM source file) is required. The
patch file =llparser.patch= is supplied in the =extempore/extras=
directory. You can get the LLVM 3.0 source [[http://llvm.org/releases/download.html#3.0][here]].

To apply the patch just move into  =llvm/lib/AsmParser= directory and
then apply the =llparser.patch= file which in can be found in
=extempore/extras=.  

The =extempore/extras/llparser.patch= file contains the patch, but
because GNU =patch= isn't installed by default on Windows patching
this file isn't quite as simple as it was on Linux/OS X. To apply the
patch on Windows there are a couple of options:

1. Get GNU patch in the form of =patch.exe= ([[http://irq5.wordpress.com/2011/06/26/gnu-patch-and-windows-uac/][maybe also check out this
   advice]]) and apply the patch in the same way as is described above
   in the 'Linux & OS X section'
2. Apply the patch manually - look at the file
   =lib/AsmParser/LLparser.cpp= in the LLVM source directory and the
   patch file in a text editor and make the required changes by hand.
   A bit cumbersome, but you only have to do it once.

*** Building LLVM

Using the Cmake (either at the command line or using the GUI), use the
generator: =Visual Studio 11 Win64=. In the configure process, you'll
need to add some arguments to the following flags:
- =CMAKE_CXX_FLAGS= & =CMAKE_CXX_FLAGS_DEBUG=: add
  =/D_VARIADIC_MAX=10= to the end

After you've done that, try building the =ALL_BUILD= project. If it
complains about two namespacing errors (which it might), you may also
have to manually change =tie= to =llvm::tie= in one of the LLVM source
files.

After you've done that, it should all build successfully.

** Boost

Currently, Extempore requires boost version 1.47, available for
download [[http://sourceforge.net/projects/boost/files/boost/1.47.0/boost_1_47_0.zip/download][here]].

Fire up a developer command prompt (which will be installed with
Visual Studio) and in the directory where you've put the boost
sources, try (replacing =<dir>= with the place you'd like the results
of the build process to go)

#+begin_src sh
boost_dir>bootstrap.bat
boost_dir>bjam --build-dir=<boost_build_dir> toolset=msvc link=static address-model=64 variant=release --build-type=complete stage
#+end_src

Now, the =bjam= boost build process puts all the compiled libraries
deep in it's internal folder hierarchy, somewhere inside
=<boost_build_dir>/boost/bin.v2/libs/=. For Extempore to build, it
needs the following libs:

- =libboost_date_time*.lib=
- =libboost_filesystem*.lib=
- =libboost_regex*.lib=
- =libboost_system*.lib=
- =libboost_thread*.lib=

where the =*= will be something like
=threading-multi/libboost_thread-vc-mt-v100= (although not necessarily
/exactly/ the same) depending on your exact setup. Extempore /does/
need these libs, but before you try to build Extempore it's hard to
guess exactly where Extempore is going to look for them. It will
definitely want them in the top level of whatever your
=boost_build_dir= was, but the exact names may vary on your system. So
the best option is to try and build Extempore, it will complain, and
then you copy the above files in to the top level =bost_build_dir=
with the appropriate names. It's a bit filthy, I know, but that's the
best way to do it at present.

** Portaudio

First, you need to download the ASIO SDK from Steinberg. You have to
create a [[http://www.steinberg.net/nc/en/company/developer/sdk_download_portal/create_3rd_party_developer_account.html][third party developer account]], then you can log in and
[[http://www.steinberg.net/nc/en/company/developer/sdk_download_portal.html][download the ASIO SDK]] (make sure you get the right SDK). You also need
to download and install [[http://www.asio4all.com][ASIO4ALL]], and which you need to install with
the 'offline setup panel' option enabled.

To build portaudio, use the VS project file =build/msvc/portaudio=.
with the =Release= configuration and the =x64= architecture. In the
=portaudio= project properties, go to =Cinfiguration Properties >
C/C++ > Preprocessor= and change a few of the preprocessor defines.
Any variable which starts in =PA_USE= (which should be at the bottom
of the list) should be toggled: so if it's equal to =0= you should
change it to =1=, and vice versa.

After that, you should be able to build the =portaudio= target in VS.
If it works successfully, copy the compiled =portaudio_x64.dll= into
=c:\Windows\System32=.

** PCRE

The [[http://www.pcre.org][PCRE lib]] should be pretty straightforward, just Cmake & build the
=ALL_BUILD= target in Visual Studio.

* Extempore

After you've built the dependencies, open the Extempore VS project in
Extempore's =msvc= subdirectory. You might have to do some fiddling
with the include paths in =Properties > Configuration Properties >
C/C++ > Additional Include Directories=. And like I mentioned earlier,
make sure you've copied the compiled lib files into the top level of
the build directories, because that's where the VS project expects to
find them.

If you have any issues, then feel free to fire an email to the [[mailto:extemporelang@googlegroups.com][mailing
list]].

* Ok, so how do I start using Extempore?

The =extempore= executable on its own is cool, but things really start
to get interesting when you can interact with it by sending it xtlang
code to evaluate. So the next step is to [[file:2012-09-26-interacting-with-the-extempore-compiler.org][set up your text editor for
working with Extempore source code]].

After you're set up, then the next step is to learn about xtlang and
the Extempore runtime. The [[file:../extempore-docs/index.org][docs index]] has a complete list of all the
posts covering this stuff, and is probably the place to go next. Have
fun :)
