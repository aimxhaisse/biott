#+begin_html
---
layout: post
title: "xtlang type diagrams"
date: 2012-10-03 11:23
comments: true
categories:
---
#+end_html

It can sometimes be hard to get a picture of the types and data
structures used in a particular piece of code, and even trickier to
make sense of how the data flows through and is modified by a given
bit of code.  The whole 'source code visualisation' thing is a super
tricky problem.[fn:codeviz-options]

[[file:~/Documents/biott/org/_posts/2012-08-09-xtlang-type-reference.org][xtlang's built-in types]] may not be too confusing in simple cases, but
the use of compound (and even recursive types) means that things can
get complicated fairly quickly.  For this reason, it's nice to be able
to visualise the types involved a particular bit of xtlang source
code.

And the types /can/ get pretty hairy: tuples with elements which
arrays of closure pointers, pointers to pointers to pointers, not to
mention the generics stuff which is coming in Extempore version 0.5.
Defining your own custom types, which then get all the safety benefits
of compile-time type checking, is one of the nice things about the
xtlang type system. When you're writing this sort of xtlang code, be
prepared to see the compiler spit out all sorts of complex type
signatures.  And they do get easier to read at a glance in time---at
least in my experience---but it's cool to be able to represent them
visually as well.  And that's where xtlang type diagrams come in.

This blog post is kindof a companion piece to the [[file:~/Documents/biott/org/_posts/2012-08-09-xtlang-type-reference.org][xtlang type system]]
post, so if you haven't read that then it might be worth jumping
across to do that first. That post does /use/ type diagrams, though,
so don't worry if you don't understand them as you go through, they'll
become clear after you come back and read /this/ post. Ah, if only
learning were an acyclic graph!

* The xtlang type key

#+begin_html
<a href=""><img src="images/type-key.png" alt=""></a>
#+end_html

To start, cast your eye over the type key: these are the visual
representations of all of Extempore's built-in types, and the basis of
all compound and custom types.

** Int and float values

#+begin_html
<a href=""><img src="images/int-examples.png" alt=""></a>
#+end_html

#+begin_html
<a href=""><img src="images/float-examples.png" width="300px" alt=""></a>
#+end_html

The primitive float and int types of different widths are all
represented by the same colour, i.e. =i1= to =i64= values are the same
blue colour and =float= and =double= values are the same green colour.
This is to avoid cluttering the graph with too many colours---it's
already inaccessible enough for colourblind folks as it is.

If the value is bound to a name (for instance in the case of a global variable)

Pointers

If the data is bound to a name, then
the name will be written in the coloured box (see examples f

[fn:codeviz-options] There are lots of proprietary and FOSS packages
out there which are designed to take source code as input and produce
some visual representation of the code (see [[http://stackoverflow.com/questions/517589/tools-to-get-a-pictorial-function-call-graph-of-code][this stackexchange thread]]
for a few suggestions).
